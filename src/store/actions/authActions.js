export const signIn = (credentials) => {   //signIn Action Creator. It takes credentials
    //which are email and password we sign in with
    return (dispatch, getState, {getFirebase}) => { //we are using {getFirebase} Object to sign the user in
      const firebase = getFirebase(); //initialising our firebase instance
      
      firebase.auth().signInWithEmailAndPassword( //this is a method on firebase auth() service
        credentials.email,
        credentials.password
      ).then(() => {
        dispatch({ type: 'LOGIN_SUCCESS' });
      }).catch((err) => { //.catch is also taken callback function and passes (err) to that function
        dispatch({ type: 'LOGIN_ERROR', err });
      });
  
    }
  }

  export const signOut = () => { //now we want to fire the dispatch of this Action Creator when user clicks in on Log out link
    //We need to add event listener to this link which sits inside SighnedInLinks component
    return (dispatch, getState, {getFirebase}) => {
      const firebase = getFirebase();
  
      firebase.auth().signOut().then(() => { //again because it is asunc and can take sometime to complete we use .then method
        dispatch({ type: 'SIGNOUT_SUCCESS' })
      });
    }
  }

  export const signUp = (newUser) => { //we pass newUser from the SignUp component when we call this action creator
    //FirsName, LastName, email and password will be passed as we stored them on the state of our SignUp component

    return (dispatch, getState, {getFirebase, getFirestore}) => {
      //we use getFirebase to sign a new user up using the authentication service by firebase
      //and we need to get firestore to communicate with our firestore database
      const firebase = getFirebase();
      const firestore = getFirestore();
  //we create a new user in firebase auth service which only stores user email and uid
      firebase.auth().createUserWithEmailAndPassword(
        newUser.email, 
        newUser.password
      ).then(resp => { //this response will contain the info about the user we've just signed up
      //and that will be swtored on resp.user
      //now we want create a record in the firestore for this user who just signed up
      //we can't use method add() in this case as we do not want autogenerated id for this user
      //we want to use uid from auth service instead so we can match logged in user with the info about that user
      //so we use .doc() method instead and pass in resp.user.uid to it
      //now we want to set some properties inside that document with .set() method
        return firestore.collection('users').doc(resp.user.uid).set({
          firstName: newUser.firstName,
          lastName: newUser.lastName,
          initials: newUser.firstName[0] + newUser.lastName[0] //concatinating first letter of 
          //first name with first letter of last name
        });
      }).then(() => {
        dispatch({ type: 'SIGNUP_SUCCESS' });
      }).catch((err) => {
        dispatch({ type: 'SIGNUP_ERROR', err});
      });
    }
  }